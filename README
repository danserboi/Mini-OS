Tema contine 2 fisiere sursa: main.c si utils.c si un fisier header: utils.h.
In fisierul sursa utils.c sunt implementate functiile. Ele vor fi apelate in
main.c, unde se citeste cuanta si apoi fiecare operatie, din fisierul input.in,
linie cu linie, si se extrag parametri operatiei.
In main.c reamintim ca declarate: un vector de frecventa pentru PID-uri, coada
de asteptare si coada de procese terminate, o variabila in care retinem
reusita operatiei de defragmentare, cuanta si cat a ramas din cuanta.
Aceste variabile se modifica pe parcurs, dupa efectuarea operatiilor.
In header-ul utils.h avem definite tipurile pentru lista generica, 
stiva, proces, coada si intalnim antetele functiilor din utils.c.
De asemenea, am definit MAX_ADDRESS ca 3145728 (3MiB).
Functiile implementate in utils.c sunt, in ordine, cele pentru: stiva, proces, 
coada, si apoi cele de prelucrare a operatiilor.
Luam fiecare functie in parte si explicam ce face.
Functia ALocCelula aloca o celula care contine informatia si adresa urmatoarei.
InitS initializeaza o stiva.
Push introduce un element pe o stiva.
Pop extrage un element de pe o stiva.
DistrugeS distruge o stiva.
Afisare_stiva afiseaza o stiva de la baza spre varf.
numar_elemente_stiva calculeaza numarul de elemente pe care o stiva il contine.
AlocProces aloca un nou proces.
DezalocProces dezaloca un proces.
InitC initializeaza o coada.
IntrQ introduce un element in coada.
ExtrQ extrage un element din coada.
PrimQ copiaza primul element din coada.
DistrugeC distruge o coada.
DistrugeCopie distruge o copie a unei cozi.
copy_coada creaza o copie a unei cozi.
numar_elemente_coada calculeaza numarul de elemente din coada.
extract_parameters extrage parametri unei operatii.
print_stack afiseaza o stiva, asa cum se cere.
print_waiting afiseaza o coada in asteptare.
print_waiting afiseaza o coada terminata.
min_PID calculeaza PID-ul minim, folosind un vector de frecventa.
inserare_asteptare insereaza un proces intr-o coada.
get cauta printre toate procesele si afiseaza procesul dupa cum se cere.
search_proces cauta un proces dupa PID si returneaza adresa lui.
push_op extrage un element de pe stiva procesului.
pop_op introduce un element pe stiva procesului.
memorie_ocupata calculeaza memoria ocupata de toate procesele.
defragmentare se ocupa de operatia de defragmentare, modificand
adresele proceselor.
run executa urmatoarele unitati de timp pe procesor.
finish calculeaza si afiseaza timpul ramas de executat.
next_address calculeaza urmatoarea adresa de dupa o adresa de referinta.
adresa_minima_disponibila_de_mem_suf calculeaza adresa minima disponibila de
memorie suficienta.
